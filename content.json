{"meta":{"title":"Reed Space","subtitle":"Reed的个人博客空间","description":"Reed|李智恒|博客|个人|reed","author":"Reed Li","url":"https://zhiheng.space","root":"/"},"posts":[{"tags":[],"title":"Hello World","date":"2020/10/25","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","permalink":"https://zhiheng.space/posts/16113/","photos":[]},{"tags":[{"name":"javascript","slug":"javascript","permalink":"https://zhiheng.space/tags/javascript/"}],"title":"[笔记]理解javascript原型和原型链","date":"2020/10/24","text":"new运算符从构造器中得到一个对象，下面的代码我们再熟悉不过了： 12345678910111213function Person( name ){ this.name = name;};Person.prototype.getName = function(){ return this.name;};var a = new Person( 'sven' )console.log( a.name ); // 输出：svenconsole.log( a.getName() ); // 输出：svenconsole.log( Object.getPrototypeOf( a ) === Person.prototype ); // 输出：true 在这里Person并不是类，而是函数构造器，JavaScript的函数既可以作为普通函数被调用，也可以作为构造器被调用。当使用new运算符来调用函数时，此时的函数就是一个构造器。 用new运算符来创建对象的过程，实际上也只是先克隆Object.prototype对象，再进行一些其他额外操作的过程。 在Chrome和Firefox等向外暴露了对象__proto__属性的浏览器下，我们可以通过下面这段代码来理解new运算的过程： 12345678910111213141516171819202122function Person( name ){ this.name = name;};Person.prototype.getName = function(){ return this.name;};var objectFactory = function(){ var obj = new Object(), // 从Object.prototype上克隆一个空的对象 Constructor = [].shift.call( arguments ); // 取得外部传入的构造器，此例是Person obj.__proto__ = Constructor.prototype; // 指向正确的原型 var ret = Constructor.apply( obj, arguments ); // 借用外部传入的构造器给obj设置属性 return typeof ret === 'object' ? ret : obj; // 确保构造器总是会返回一个对象};var a = objectFactory( Person, 'sven' );console.log( a.name ); // 输出：svenconsole.log( a.getName() ); // 输出：svenconsole.log( Object.getPrototypeOf( a ) === Person.prototype ); // 输出：true 目前我们一直在讨论“对象的原型”，就JavaScript的真正实现来说，其实并不能说对象有原型，而只能说对象的构造器有原型。对于“对象把请求委托给它自己的原型”这句话，更好的说法是对象把请求委托给它的构造器的原型。 JavaScript给对象提供了一个名为__proto__的隐藏属性，某个对象的__proto__属性默认会指向它的构造器的原型对象，即{Constructor}.prototype。所以prototype是函数的属性，不是实例对象的，实例对象拥有的是__proto__，用来查找prototype的。看到一张别人画的图，可以直观地了解原型链： 上图可以看到，prototype.constructor指向的是构造器函数本身，改变这个指针并不能改变构造函数。实例对象本身没有constructor属性，你访问到的是原型链上的prototype.constructor。 函数本身也是对象，也具有__proto__，他指向的是JS内置对象Function的原型Function.prototype，所以你才能调用fn.call、fn.apply这些方法，你调用的其实是Function.prototype.call和Function.prototype.apply。 prototype本身也是对象，也具有__proto__，指向了他父级的prototype。__proto__和prototype的链式指向构成了JS的原型链。原型链的最终指向是Object，Object上面原型链是null，即Object.__proto__ === null。","permalink":"https://zhiheng.space/posts/14180/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"https://zhiheng.space/tags/%E5%B7%A5%E5%85%B7/"}],"title":"vim常用命令整理","date":"2020/01/20","text":"Vim是一个强大的文本编辑工具，然而刚开始使用的体验是极其痛苦的，因为各种命令实在太多，而且各种命令按键乍看之下完全没有规律，对于以往的输入方式，完全没有借鉴之处。这个体验让我想起了五笔输入法，使用体验是类似的，慢慢练习熟练之后就会大幅提高效率。 既然决定要开始学习Vim，那就开始定制学习计划。Vim命令那么多，想要一次性掌握几乎是不可能的，根据二八法则，先掌握20%的命令就可以解决80%需求，按照这样的思路，我做出了以下的安排： 首先要先知道Vim有三种工作模式：普通模式、插入模式、命令模式。 普通模式进入插入模式，按下字母i 插入模式进入普通模式，按下Esc键 普通模式进入命令模式，先输入冒号:，然后输入相应的命令以回车结束 接下来就是先记忆常用的命令，别一眼看着好像也不少，但是是有规律的，移动类的是基础中的基础，如果掌握了，后面的命令记忆起来会非常快： 12345678910111213141516# 移动（普通模式）h：向左j：向下k：向上l：向右8l： 向右移动 8 个字符0：到行首^：到行首第一个非空字符$：到行尾gg：到文件头G：到文件尾22G：跳转到第 22 行Ctrl+F: 到上页Ctrl+B: 到下页 1234567# 复制（普通模式）yy：复制一行8yy：向下复制8行# 字母y搭配移动命令y0：复制到行首y^：复制到行首第一个非空字符y$：复制到行尾 123# 剪切（普通模式）x：向后剪切1个字符，如果是在行尾，则为向前剪切8x：剪切8个字符 1234567# 删除（普通模式）- 删除的内容会保存到粘贴板，可以配合下面的粘贴命令使用dd：删除一行100dd：删除100行# 字母d搭配移动命令d0：复制到行首d^：复制到行首第一个非空字符d$：复制到行尾 123# 粘贴（普通模式）- 对应上面三种类型操作的粘贴功能，外部粘贴板的内容不识别p：粘贴保存在粘贴板的内容8p：将粘贴板的内容粘贴8次 12345# 撤销（普通模式）u：撤销1次3u：撤销3次U：撤销当前行的所有修改Ctrl+r：恢复到撤销前 1234# 查找（普通模式）- 按下/直接进入查找，输入相应的字符串按确定即可n：查找下1个匹配N：查找上1个匹配3n：查找下面第3个匹配 1234# 退出（命令模式）- 普通模式进入命令模式，先输入冒号：q： 不保存退出q!： 不保存，强制退出wq：保存当前文件并退出 1234# 排版（命令模式）ce： 本行内容居中 #center单词简写le： 本行内容居左 #left单词简写ri： 本行内容居右 #right单词简写 我认为的基本常用命令就这些，别看上去好像也不少，但是很多都是类似的，只是组合了以下，实际精简一下也就10来种类型的命令。相信这些命令足以解决初学者绝大部分情况下的需求。 如果以上命令已经觉得烂熟于心了，那么就可以参照下面的这张总结图进行更全面的拓展了：","permalink":"https://zhiheng.space/posts/51495/","photos":[]}],"categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://zhiheng.space/tags/javascript/"},{"name":"工具","slug":"工具","permalink":"https://zhiheng.space/tags/%E5%B7%A5%E5%85%B7/"}]}